<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<!--									-->
<!-- Web code from Project Singlefile 					-->
<!-- For the latest release: http://phil.cryer.us/code/singlefile	-->
<!-- Released under the GPLv2 - Open Source License			-->
<!--									-->
<!-- Please support Electronic Frontier Foundation http://eff.org	-->
<!--									-->
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<title>Project Singlefile</title>
<style type="text/css">
/* global font and body settings */
body {
	font-size : 100%;
	background-color : #d3d6d9;
	padding: 0px;
	margin: 0px 0px 30px 0px;
}
body, td, th {
	font-family : arial, helvetica, sans-serif;
	font-size : 10pt;
}
pre, tt, code {
	font-family : courier new, monospaced;
	font-size : 9pt;
}
#pageContainer {
	display: block;
	position: relative;
	clear: both;
	background-color: #fff;
	border: 1px solid #999;
	padding: 40px;
	margin: 30px;
}
#pageHeader {
	display: block;
	position: relative;
	height: 100px;
	background-color: #e7eaee;
	border: 1px solid #cccccc;
	border-bottom: none;
	margin: 10px 0px 0px 0px;
}
#pageBody {
	margin: 0px 18px 0px 20px;
}
/* anchors */
a:link {
	color: #11568c;
	text-decoration : none;
}
a:visited {
	color: #571c8d;
	text-decoration : none;
}
a:hover {
	color: #7a1d42;
	text-decoration : underline;
}
a:active {
	color: #7a1d42;
}
/* page header elements (logo and navigation) */
.navigation {
	display: block;
	position: relative;
	height: 20px;
	background-color: #335588;
	border: 1px solid #cccccc;
	border-top: none;
	color: #ffffff;
	font-size: 11px;
	line-height: 18px;
	padding: 0px 0px 0px 0px;
	margin: 0px 0px 25px 0px;
	overflow: hidden;
}
.navigation a {
	margin: 0px 20px 0px 20px;
}
.navigation a:link { color: #ffffff; }
.navigation a:visited { color: #ffffff; }
.navigation a:hover { color: #ffffff; }
.navigation a:active { color: #ffffff; }
/* headings */
h1 {
	display: block;
	position: relative;
	font-size : 1.7em;
	font-weight : bold;
	color: #670e15;
	padding: 0px;
	margin: 30px 0px 0px 20px;
}
h2 {
	font-size : 1.3em;
	font-weight : bold;
	margin: 40px 0px 6px 0px;
	padding: 0px;
	color: #335588;
}
h3 {
	font-size : 1.0em;
	font-weight : bold;
	margin: 25px 0px 3px 0px;
	padding: 0px;
	color: #334466;
}
/* general elements */
p {
	margin: 0px 0px 15px 0px;
}
ul {
	margin: 5px 0px 15px 35px;
}
li {
	padding-bottom : 4px;
}
tt {
	font-family : courier new;
	font-weight : bold;
	color : #060;
}
hr {
	display: block;
	height: 1px;
	background-color: #999999;
	border: none;
	margin: 40px 0px 20px 0px;
}
.footer {
	font-size : 8pt;
	color : #666;
	text-align : center;
	margin-top : 2em;
	padding-top : 0.5em;
	border-top : 1px #CCC solid;
}
div.alert {
	display: block;
	position: relative;
	margin: 20px 0px 20px 0px;
	font-family: Arial,Helvetica,sans-serif;
	font-size: 12px;
	width: 100%;
	color: #333333;
}
div.alertpadding {
	padding: 20px 20px 15px 20px;
}
div.alert h3 {
	font-size: 16px;
	line-height: 15px;
	margin: 0px 0px 0px 0px;
	padding: 2px 0px 8px 0px;
}
div.alert p {
	margin: 7px 0px 7px 0px;
}
.alertMild {
	background-color: #F2F3F4;
	border: 1px solid #CCCCCC;
}
.alertMild h3 {
	color: #17518C;
}
.alertMedium {
	background-color: #FFE9B2;
	border: 1px solid #d9b04c;
}
.alertMedium h3 {
	color: #ca7303;
}

.alertHot {
	background-color: #edb9b1;
	border: 1px solid #bb8888;
}
.alertHot h3 {
	color: #8c0900;
}

</style>
<script type="text/javascript"> 
//** Ajax Tabs Content script v2.0- (c) Dynamic Drive DHTML code library (http://www.dynamicdrive.com)
//** Updated Oct 21st, 07 to version 2.0. Contains numerous improvements

var ddajaxtabssettings={}
ddajaxtabssettings.bustcachevar=1  //bust potential caching of external pages after initial request? (1=yes, 0=no)
//**ddajaxtabssettings.loadstatustext="<img src='loading.gif' /> Loading content..."**// 
ddajaxtabssettings.loadstatustext="Loading content..." 


////NO NEED TO EDIT BELOW////////////////////////

function ddajaxtabs(tabinterfaceid, contentdivid){
	this.tabinterfaceid=tabinterfaceid //ID of Tab Menu main container
	this.tabs=document.getElementById(tabinterfaceid).getElementsByTagName("a") //Get all tab links within container
	this.enabletabpersistence=true
	this.hottabspositions=[] //Array to store position of tabs that have a "rel" attr defined, relative to all tab links, within container
	this.contentdivid=contentdivid
	this.defaultHTML=""
	this.defaultIframe='<iframe src="about:blank" marginwidth="0" marginheight="0" frameborder="0" vspace="0" hspace="0" class="tabcontentiframe" style="width:100%; height:auto; min-height: 100px"></iframe>'
	this.defaultIframe=this.defaultIframe.replace(/<iframe/i, '<iframe name="'+"_ddajaxtabsiframe-"+contentdivid+'" ')
this.revcontentids=[] //Array to store ids of arbitrary contents to expand/contact as well ("rev" attr values)
	this.selectedClassTarget="link" //keyword to indicate which target element to assign "selected" CSS class ("linkparent" or "link")
}

ddajaxtabs.connect=function(pageurl, tabinstance){
	var page_request = false
	var bustcacheparameter=""
	if (window.XMLHttpRequest) // if Mozilla, IE7, Safari etc
		page_request = new XMLHttpRequest()
	else if (window.ActiveXObject){ // if IE6 or below
		try {
		page_request = new ActiveXObject("Msxml2.XMLHTTP")
		} 
		catch (e){
			try{
			page_request = new ActiveXObject("Microsoft.XMLHTTP")
			}
			catch (e){}
		}
	}
	else
		return false
	var ajaxfriendlyurl=pageurl.replace(/^http:\/\/[^\/]+\//i, "http://"+window.location.hostname+"/") 
	page_request.onreadystatechange=function(){ddajaxtabs.loadpage(page_request, pageurl, tabinstance)}
	if (ddajaxtabssettings.bustcachevar) //if bust caching of external page
		bustcacheparameter=(ajaxfriendlyurl.indexOf("?")!=-1)? "&"+new Date().getTime() : "?"+new Date().getTime()
	page_request.open('GET', ajaxfriendlyurl+bustcacheparameter, true)
	page_request.send(null)
}

ddajaxtabs.loadpage=function(page_request, pageurl, tabinstance){
	var divId=tabinstance.contentdivid
	document.getElementById(divId).innerHTML=ddajaxtabssettings.loadstatustext //Display "fetching page message"
	if (page_request.readyState == 4 && (page_request.status==200 || window.location.href.indexOf("http")==-1)){
		document.getElementById(divId).innerHTML=page_request.responseText
		ddajaxtabs.ajaxpageloadaction(pageurl, tabinstance)
	}
}

ddajaxtabs.ajaxpageloadaction=function(pageurl, tabinstance){
	tabinstance.onajaxpageload(pageurl) //call user customized onajaxpageload() function when an ajax page is fetched/ loaded
}

ddajaxtabs.getCookie=function(Name){ 
	var re=new RegExp(Name+"=[^;]+", "i"); //construct RE to search for target name/value pair
	if (document.cookie.match(re)) //if cookie found
		return document.cookie.match(re)[0].split("=")[1] //return its value
	return ""
}

ddajaxtabs.setCookie=function(name, value){
	document.cookie = name+"="+value+";path=/" //cookie value is domain wide (path=/)
}

ddajaxtabs.prototype={

	expandit:function(tabid_or_position){ //PUBLIC function to select a tab either by its ID or position(int) within its peers
		this.cancelautorun() //stop auto cycling of tabs (if running)
		var tabref=""
		try{
			if (typeof tabid_or_position=="string" && document.getElementById(tabid_or_position).getAttribute("rel")) //if specified tab contains "rel" attr
				tabref=document.getElementById(tabid_or_position)
			else if (parseInt(tabid_or_position)!=NaN && this.tabs[tabid_or_position].getAttribute("rel")) //if specified tab contains "rel" attr
				tabref=this.tabs[tabid_or_position]
		}
		catch(err){alert("Invalid Tab ID or position entered!")}
		if (tabref!="") //if a valid tab is found based on function parameter
			this.expandtab(tabref) //expand this tab
	},

	setpersist:function(bool){ //PUBLIC function to toggle persistence feature
			this.enabletabpersistence=bool
	},

	loadajaxpage:function(pageurl){ //PUBLIC function to fetch a page via Ajax and display it within the Tab Content instance's container
		ddajaxtabs.connect(pageurl, this)
	},

	loadiframepage:function(pageurl){ //PUBLIC function to fetch a page and load it into the IFRAME of the Tab Content instance's container
		this.iframedisplay(pageurl, this.contentdivid)
	},

	setselectedClassTarget:function(objstr){ //PUBLIC function to set which target element to assign "selected" CSS class ("linkparent" or "link")
		this.selectedClassTarget=objstr || "link"
	},

	getselectedClassTarget:function(tabref){ //Returns target element to assign "selected" CSS class to
		return (this.selectedClassTarget==("linkparent".toLowerCase()))? tabref.parentNode : tabref
	},

	onajaxpageload:function(pageurl){ //PUBLIC Event handler that can invoke custom code whenever an Ajax page has been fetched and displayed
		//do nothing by default
	},

	expandtab:function(tabref){
		var relattrvalue=tabref.getAttribute("rel")
		//Get "rev" attr as a string of IDs in the format ",john,george,trey,etc," to easy searching through
		var associatedrevids=(tabref.getAttribute("rev"))? ","+tabref.getAttribute("rev").replace(/\s+/, "")+"," : ""
		if (relattrvalue=="#default")
			document.getElementById(this.contentdivid).innerHTML=this.defaultHTML
		else if (relattrvalue=="#iframe")
			this.iframedisplay(tabref.getAttribute("href"), this.contentdivid)
		else
			ddajaxtabs.connect(tabref.getAttribute("href"), this)
		this.expandrevcontent(associatedrevids)
		for (var i=0; i<this.tabs.length; i++){ //Loop through all tabs, and assign only the selected tab the CSS class "selected"
			this.getselectedClassTarget(this.tabs[i]).className=(this.tabs[i].getAttribute("href")==tabref.getAttribute("href"))? "selected" : ""
		}
		if (this.enabletabpersistence) //if persistence enabled, save selected tab position(int) relative to its peers
			ddajaxtabs.setCookie(this.tabinterfaceid, tabref.tabposition)
	},

	iframedisplay:function(pageurl, contentdivid){
		if (typeof window.frames["_ddajaxtabsiframe-"+contentdivid]!="undefined"){
			try{delete window.frames["_ddajaxtabsiframe-"+contentdivid]} //delete iframe within Tab content container if it exists (due to bug in Firefox)
			catch(err){}
		}
		document.getElementById(contentdivid).innerHTML=this.defaultIframe
		window.frames["_ddajaxtabsiframe-"+contentdivid].location.replace(pageurl) //load desired page into iframe
	},


	expandrevcontent:function(associatedrevids){
		var allrevids=this.revcontentids
		for (var i=0; i<allrevids.length; i++){ //Loop through rev attributes for all tabs in this tab interface
			//if any values stored within associatedrevids matches one within allrevids, expand that DIV, otherwise, contract it
			document.getElementById(allrevids[i]).style.display=(associatedrevids.indexOf(","+allrevids[i]+",")!=-1)? "block" : "none"
		}
	},

	autorun:function(){ //function to auto cycle through and select tabs based on a set interval
		var currentTabIndex=this.automode_currentTabIndex //index within this.hottabspositions to begin
		var hottabspositions=this.hottabspositions //Array containing position numbers of "hot" tabs (those with a "rel" attr)
		this.expandtab(this.tabs[hottabspositions[currentTabIndex]])
		this.automode_currentTabIndex=(currentTabIndex<hottabspositions.length-1)? currentTabIndex+1 : 0 //increment currentTabIndex
	},

	cancelautorun:function(){
		if (typeof this.autoruntimer!="undefined")
			clearInterval(this.autoruntimer)
	},

	init:function(automodeperiod){
		var persistedtab=ddajaxtabs.getCookie(this.tabinterfaceid) //get position of persisted tab (applicable if persistence is enabled)
		var persisterror=true //Bool variable to check whether persisted tab position is valid (can become invalid if user has modified tab structure)
		this.automodeperiod=automodeperiod || 0
		this.defaultHTML=document.getElementById(this.contentdivid).innerHTML
		for (var i=0; i<this.tabs.length; i++){
			this.tabs[i].tabposition=i //remember position of tab relative to its peers
			if (this.tabs[i].getAttribute("rel")){
				var tabinstance=this
				this.hottabspositions[this.hottabspositions.length]=i //store position of "hot" tab ("rel" attr defined) relative to its peers
				this.tabs[i].onclick=function(){
					tabinstance.expandtab(this)
					tabinstance.cancelautorun() //stop auto cycling of tabs (if running)
					return false
				}
				if (this.tabs[i].getAttribute("rev")){ //if "rev" attr defined, store each value within "rev" as an array element
					this.revcontentids=this.revcontentids.concat(this.tabs[i].getAttribute("rev").split(/\s*,\s*/))
				}
				if (this.enabletabpersistence && parseInt(persistedtab)==i || !this.enabletabpersistence && this.getselectedClassTarget(this.tabs[i]).className=="selected"){
					this.expandtab(this.tabs[i]) //expand current tab if it's the persisted tab, or if persist=off, carries the "selected" CSS class
					persisterror=false //Persisted tab (if applicable) was found, so set "persisterror" to false
					//If currently selected tab's index(i) is greater than 0, this means its not the 1st tab, so set the tab to begin in automode to 1st tab:
					this.automode_currentTabIndex=(i>0)? 0 : 1
				}
			}
		} //END for loop
		if (persisterror) //if an error has occured while trying to retrieve persisted tab (based on its position within its peers)
			this.expandtab(this.tabs[this.hottabspositions[0]]) //Just select first tab that contains a "rel" attr
		if (parseInt(this.automodeperiod)>500 && this.hottabspositions.length>1){
			this.automode_currentTabIndex=this.automode_currentTabIndex || 0
			this.autoruntimer=setInterval(function(){tabinstance.autorun()}, this.automodeperiod)
		}
	} //END int() function

} //END Prototype assignment

</script>
</head><body>

<div id="pageContainer">

	<div id="pageHeader">
		<h1>Project Singlefile</h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a singlefile website; keep it simple stupid
	</div>

	<div class="navigation" id="pagetabs">
		<a class="selected" href="index.html" rel="#default">Home</a>|
		<a class="" href="index.html#two">Page 2</a>|
		<a class="" href="whitepaper.html" rel="pagedivcontainer">Whitepaper</a>|
		<a class="" href="demos.html" rel="pagedivcontainer">Demos</a>|
		<a class="" href="downloads.html" rel="pagedivcontainer">Downloads</a>
	</div>

	<div id="pageBody">

	<div id="pagedivcontainer" alt="two"> 
		<h2>The Project</h2>
		<p>Web pages have gotten too big for their own good, less is more, conserve bandwidth, show some inteligence and use efficient code for once. To backup my ranting I've created Project Singlefile - a basic, attractive website suitable for a myraid of uses.  Grab it, change the headings and content and you have a website. If only everything was this simple. </p>
		<p>Appetendi caritatem hosti magni, memoriter nemini optari platone puto. Alios commodis confirmare dedocere diogenem, dissentiunt divina eidola expetendum ille laetamur platea similia sol. Caret commodo displicet doleamus explicatam, fallare hortatore insipientiam nusquam perpaulum quosdam sumitur verborum voluptatis.</p> 
		<p>Circumcisaque dissensio maiorum movere, nemo quaeri repellat stultus videtisne. Divitiarum eum imagines legat, quanta vidit. Agam alias aliquid equos imperio laboribus perferendis secumque. Altera deinde delectet deterius, error ignem praebeat profecto, referrentur stabilem tantum tation tota ubi. Amicum curabitur dixi equidem illud patriam possent praesentibus utrisque. Consecutionem praesentium provocarem suscipiantur. Capti domesticarum grata imperii, insitam malunt morte tandem tradidisse. </p>
	</div>

<script type="text/javascript">
	var pages=new ddajaxtabs("pagetabs", "pagedivcontainer")
	pages.setpersist(true)
	pages.setselectedClassTarget("link") //"link" or "linkparent"
	pages.init()
</script>

<br />

	<div class="footer"> 
	 	{	page code from <a href="http://phil.cryer.us/code/singlefile/">project singlefile</a>	} 
	</div>

</div>
</div>
</body></html>

